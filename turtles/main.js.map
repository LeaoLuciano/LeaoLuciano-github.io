{"version":3,"file":"main.js","mappings":"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","sources":["webpack://turtles/webpack/bootstrap","webpack://turtles/webpack/runtime/global","webpack://turtles/webpack/runtime/publicPath","webpack://turtles/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement;\nconst ctx = canvas.getContext('2d');\n\nclass Vector2 {\n    x = 0.0;\n    y = 0.0;\n    \n    constructor(x : number = 0.0, y : number = 0.0) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public toString = () : String => {\n        return `(${this.x}, ${this.y})`;\n    }\n\n\n    add = (vec : Vector2) : this => {\n        this.x += vec.x;\n        this.y += vec.y;\n        return this;\n    }\n    $add = (vec : Vector2) : Vector2 => {\n        return new Vector2(this.x + vec.x, this.y + vec.y);\n    }\n    sub = (vec : Vector2) : this => {\n        this.x -= vec.x;\n        this.y -= vec.y;\n        return this;\n    }\n    $sub = (vec : Vector2) : Vector2 => {\n        return new Vector2(this.x - vec.x, this.y - vec.y);\n    }\n    mul = (val : number) : this=> {\n        this.x *= val; \n        this.y *= val;\n        return this;\n    }\n    $mul = (val : number) : Vector2 => {\n        return new Vector2(this.x * val, this.y * val);\n    }\n    div = (val : number) : this=> {\n        this.x /= val;\n        this.y /= val;\n        return this;\n    }\n    $div = (val : number) : Vector2 => {\n        return new Vector2(this.x / val, this.y / val);\n    }\n\n    angle() : number {\n        return Math.atan2(this.x, this.y);\n    }\n\n    static ERR = 1e-10; \n\n    normalized() : this{\n        let norm = Math.sqrt(this.x**2 + this.y**2);\n        if (norm < Vector2.ERR) {\n            this.x = 0.0;\n            this.y = 0.0;\n            return this;\n        }\n        else {\n            this.x /= norm;\n            this.y /= norm;\n            return this;\n        }\n    }\n\n    $normalized() : Vector2 {\n        let norm = Math.sqrt(this.x**2 + this.y**2);\n        if (norm < Vector2.ERR) {\n            return new Vector2();\n        }\n        return new Vector2(this.x / norm, this.y / norm);\n    }\n\n    rotated(angle : number) : this {\n        [this.x, this.y] = [\n            this.x * Math.cos(angle) - this.y * Math.sin(angle),\n            this.x * Math.sin(angle) + this.y * Math.cos(angle)\n        ];\n        return this;\n    }\n\n}\n\n\n\nclass Node2D {\n    position = new Vector2(0.0, 0.0);\n    rotation = 0.0;\n\n    scale = new Vector2(1.0, 1.0);\n\n    children: Node2D[] = [];\n\n    ctx: CanvasRenderingContext2D;\n\n    _enter(ctx: CanvasRenderingContext2D) {\n        this.ctx = ctx;\n        for(let child of this.children)\n            child._enter(ctx);\n    }\n\n    _process(delta : number) : void {\n        ctx.save();\n        ctx.translate(this.position.x, this.position.y);\n        ctx.rotate(this.rotation);\n        this.children.map((child) => {child._process(delta)});\n        ctx.restore();\n    }\n    \n    add_child(node : Node2D) {\n        this.children.push(node);    \n        // node._enter(ctx);\n    }\n}\n\nclass Sprite2D extends Node2D {\n    img: CanvasImageSource;\n    \n    // TODO: Adjust with parent\n    get absolute_width() : number {\n        return Math.abs(this.img.width as number) * this.scale.x;\n    }\n\n    get absolute_height() : number {\n        return Math.abs(this.img.width as number) * this.scale.y;\n    }\n\n\n\n    _process(delta: number) : void {\n        ctx.save();\n        ctx.rotate(this.rotation);\n        ctx.translate(this.position.x - (this.scale.x < 0 ? -1: 1) * this.absolute_width/2, \n            this.position.y - (this.scale.y < 0 ? -1: 1) *this.absolute_height/2);\n\n        ctx.scale(this.scale.x < 0 ? -1 : 1, this.scale.y < 0 ? -1 : 1);\n\n        ctx.drawImage(this.img, 0 ,0, \n        this.absolute_width, this.absolute_height);\n\n        ctx.restore();\n    }\n}\n\nimport body_path from \"/assets/body.svg\"\nimport arm_path from \"/assets/arm.svg\"\n\n\nconst RES = 720/1280;\nconst WIDTH = 1280;\nconst HEIGHT = 720;\n\nwindow.addEventListener(\"resize\", on_resize);\non_resize();\n\nfunction on_resize() {\n\n    if (window.innerWidth * RES < window.innerHeight) {\n        canvas.width = window.innerWidth;\n        canvas.height = canvas.width * RES;//window.innerHeight;\n    }\n    else {\n        canvas.height = window.innerHeight;\n        canvas.width = canvas.height / RES;\n    }\n\n\n    clear_screen();\n\n}\n\nfunction clear_screen() {\n    ctx.fillStyle = \"gray\";\n    ctx.fillStyle = 'rgba(80, 80, 80, 1.0)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n}\n\nfunction start(root : Node2D) {\n    const DELTA = 1.0/30;\n    root._enter(ctx);\n\n    window.setTimeout(loop, 1000 * DELTA);\n    \n    function loop() {\n        clear_screen();\n        ctx.save();\n        ctx.scale(canvas.width/WIDTH, canvas.height/HEIGHT);\n        root._process(DELTA);\n        window.setTimeout(loop, 1000 * DELTA);\n        ctx.restore();\n    }\n}\n\n\nclass KinematicObject extends Node2D {\n    velocity = new Vector2(0.0, 0.0);\n    acceleration = new Vector2(0.0, 0.0);\n\n    _process(delta: number) {\n        this.position.add(this.velocity.$mul(delta));\n        this.velocity.add(this.acceleration.$mul(delta));\n        super._process(delta);\n    }\n\n    \n}\n\nclass Turtle extends KinematicObject {\n    radius = 20;\n\n    body = new Sprite2D();\n    arm = new Sprite2D();\n    arm2 = new Sprite2D();\n\n    time = 0.0;\n\n    i = 0;\n\n    children = [\n        this.body, this.arm, this.arm2\n    ]\n\n    _enter(ctx: CanvasRenderingContext2D): void {\n\n        this.body.img = new Image;\n        this.arm.img = new Image;\n        this.arm2.img = new Image;\n\n        // this.body.img.onload = () => {\n        //  console.log(this.i);     \n        // }\n        // this.arm.img.onload = () => {\n        //  console.log(this.i);      \n        // }\n        this.body.img.src = body_path;\n        this.arm.img.src = arm_path;\n        this.arm2.img.src = arm_path;\n\n        this.body.scale.mul(0.25)\n        this.arm.scale.mul(0.25);\n        this.arm2.scale = new Vector2(-0.25, 0.25);//.mul(0.6);\n        // this.arm2.scale.x *= -1;\n\n        super._enter(ctx);\n    }\n\n    _process(delta: number) {\n        super._process(delta);\n        this.arm.rotation = Math.sin(10.0 * this.time)*0.3 + 0.2;\n        this.arm2.rotation = Math.sin(10.0 * this.time + Math.PI)*0.3 - 0.2;\n        this.time += delta;\n\n        let aim = turtles[(this.i + 1) % num_turtles].position.$sub(this.position);\n        this.velocity = aim.$normalized().$mul(vel);\n        this.rotation = Math.PI-aim.angle();\n    }\n}\n\nconst num_turtles = 6;\nconst turtles : Turtle[] = [] \nconst vel = 100.0;\n\nconst root = new Node2D;\nroot.ctx = ctx;\n\nconst center = new Vector2(WIDTH/2, HEIGHT/2);\n\nfor(let i = 0; i < num_turtles; i++) {\n    let turtle = new Turtle();\n    turtle.i = i;\n    turtle.position = center.$add(new Vector2(350.0, 0.0).rotated(2 * i * Math.PI / num_turtles));\n\n    turtles.push(turtle);\n    root.add_child(turtle);\n    \n}\n\nstart(root);"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","canvas","getElementById","ctx","getContext","Vector2","constructor","x","y","toString","add","vec","$add","sub","$sub","mul","val","$mul","div","$div","angle","Math","atan2","normalized","norm","sqrt","ERR","$normalized","rotated","cos","sin","Node2D","position","rotation","scale","children","_enter","child","_process","delta","save","translate","rotate","map","restore","add_child","node","push","Sprite2D","absolute_width","abs","img","width","absolute_height","drawImage","RES","on_resize","innerWidth","innerHeight","height","clear_screen","fillStyle","fillRect","addEventListener","KinematicObject","velocity","acceleration","super","Turtle","radius","body","arm","arm2","time","i","Image","PI","aim","turtles","num_turtles","vel","root","center","WIDTH","HEIGHT","turtle","DELTA","setTimeout","loop","start"],"sourceRoot":""}